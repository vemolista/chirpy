// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chirps.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
insert into chirps (id, created_at, updated_at, body, user_id)
values (
    gen_random_uuid(),
    now(),
    now(),
    $1,
    $2
)
returning id, created_at, updated_at, user_id, body
`

type CreateChirpParams struct {
	Body   string
	UserID uuid.UUID
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Body,
	)
	return i, err
}

const getChirp = `-- name: GetChirp :one
select
    id,
    created_at,
    updated_at,
    body,
    user_id
from
    chirps
where
    id = $1
`

type GetChirpRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Body      string
	UserID    uuid.UUID
}

func (q *Queries) GetChirp(ctx context.Context, id uuid.UUID) (GetChirpRow, error) {
	row := q.db.QueryRowContext(ctx, getChirp, id)
	var i GetChirpRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const listChirps = `-- name: ListChirps :many
select
    id,
    created_at,
    updated_at,
    body,
    user_id
from
    chirps
order by created_at asc
`

type ListChirpsRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Body      string
	UserID    uuid.UUID
}

func (q *Queries) ListChirps(ctx context.Context) ([]ListChirpsRow, error) {
	rows, err := q.db.QueryContext(ctx, listChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListChirpsRow
	for rows.Next() {
		var i ListChirpsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
